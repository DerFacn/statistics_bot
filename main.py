import os
import re
import telebot
from dotenv import load_dotenv
from database import session, Chat, User
from telebot.apihelper import ApiTelegramException as TgException

load_dotenv()
TOKEN = os.environ.get('BOT_TOKEN')
bot = telebot.TeleBot(TOKEN)


def extract_arg(text):
    try:
        return text.split()[1]
    except IndexError:
        return None


def get_data(chat_id, user_id):
    chat = session.query(Chat).filter_by(chat_id=chat_id).first()
    if not chat:
        chat = Chat(chat_id=chat_id)
        session.add(chat)
        session.commit()

    user = session.query(User).filter_by(user_id=user_id, chat_id=chat_id).first()
    if not user:
        user = User(user_id=user_id, chat_id=chat_id)
        session.add(user)
        session.commit()

    return chat, user


def initialize(message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    return get_data(chat_id, user_id)


@bot.message_handler(commands=['start'], chat_types=['private'])
def command_start_handler(message):
    user = session.query(User).filter_by(user_id=message.from_user.id).first()
    if not user:
        return bot.send_message(
            message.chat.id,
            f'''
–ü—Ä–∏–≤—ñ—Ç, <b>{message.from_user.first_name}</b>!

–Ø–∫ –±–∞—á—É, —Ç–∏ –≤–ø–µ—Ä—à–µ –∑–≤–µ—Ä—Ç–∞—î—à—Å—è –¥–æ –º–µ–Ω–µ, —Ç–∞–∫ —è–∫ —Ç–µ–±–µ –Ω–µ–º–∞—î –≤ –º–æ—ó–π –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.\n
–Ø–∫—â–æ —Ç–∏ —â–µ –Ω–µ –∑–Ω–∞—î—à, —è –±–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ - –∑–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ —á–∞—Ç—ñ–≤ —ñ –∑–∞–ø–∏—Å—É—é –≤ –±–¥.\n
‚ö†Ô∏è –Ø –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∂–æ–¥–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –æ–∫—Ä—ñ–º –∞–π–¥—ñ!
–í–æ–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ª–∏—à–µ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø—ñ–¥ –ø–µ–≤–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.\n
–©–æ –± –ø–æ—á–∞—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –º–µ–Ω–µ, –ø—Ä–æ—Å—Ç–æ –¥–æ–¥–∞–π—Ç–µ –º–µ–Ω–µ –≤ —Å–≤–æ—é –≥—Ä—É–ø—É,
–¥–µ –≤ –º–µ–Ω–µ –º–∞—é—Ç—å –±—É—Ç–∏ –∞–¥–º—ñ–Ω –ø—Ä–∞–≤–∞.
            ''',
            parse_mode='HTML')
    bot.send_message(
        message.chat.id,
        f'''
–ü—Ä–∏–≤—ñ—Ç, <b>{message.from_user.first_name}</b>!

–í–∞—à –∞–π–¥—ñ —î –≤ –º–æ—ó–π –±–∞–∑—ñ –¥–∞–Ω–∏—Ö, –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–∫—ñ–ª—å–∫–∏
–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—Å—å–æ–≥–æ –Ω–∞–ø–∏—Å–∞–ª–∏ –∑–∞ –≤–µ—Å—å —á–∞—Å, –¥–ª—è —Ü—å–æ–≥–æ –Ω–∞–ø–∏—à—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /chats\n
–©–æ –± –ø–æ—á–∞—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –º–µ–Ω–µ, –ø—Ä–æ—Å—Ç–æ –¥–æ–¥–∞–π—Ç–µ –º–µ–Ω–µ –≤ —Å–≤–æ—é –≥—Ä—É–ø—É,
–¥–µ –≤ –º–µ–Ω–µ –º–∞—é—Ç—å –±—É—Ç–∏ –∞–¥–º—ñ–Ω –ø—Ä–∞–≤–∞.
        ''',
        parse_mode='HTML'
    )


@bot.message_handler(commands=['p', 'profile', 'stats', '–ø', '–ø—Ä–æ—Ñ—ñ–ª—å'], chat_types=['supergroup'],
                     func=lambda message: not message.reply_to_message)
def command_stats_handler(message):
    user = session.query(User).filter_by(user_id=message.from_user.id, chat_id=message.chat.id).first()
    if not user:
        return bot.send_message(message.chat.id, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞. –ù–∞–ø–∏—à—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.')

    firstname = bot.get_chat_member(user.chat_id, user.user_id).user.first_name
    joined = user.created_at
    words = user.word_count
    chars = user.ch_count
    photo = user.photo_count
    video = user.video_count
    audio = user.audio_count
    sticker = user.sticker_count

    return bot.send_message(
        message.chat.id,
        f'''
üßë‚Äçüíª User: <b>{firstname}</b>
üóìÔ∏è Joined: <b>{joined}</b>
üî§ Words: <b>{words}</b>
üî£ Characters: <b>{chars}</b>
üñºÔ∏è Photo: <b>{photo}</b>
üìπ Video: <b>{video}</b>
üéµ Audio: <b>{audio}</b>
‚ú® Sticker: <b>{sticker}</b>
        ''',
        parse_mode='HTML'
    )


@bot.message_handler(chat_types=['supergroup'], content_types=['text'],
                     commands=['p', 'profile', 'stats', '–ø', '–ø—Ä–æ—Ñ—ñ–ª—å'],
                     func=lambda message: not message.from_user.is_bot and message.reply_to_message)
def get_user_stats_by_reply(message):
    user_id = message.reply_to_message.from_user.id
    chat_id = message.chat.id

    chat, user = get_data(chat_id, user_id)

    if not chat:
        return bot.send_message(chat_id, "–ß–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö. –ú–æ–∂–ª–∏–≤–æ, –Ω—ñ—Ö—Ç–æ –Ω—ñ—á–æ–≥–æ —â–µ –Ω–µ –Ω–∞–ø–∏—Å–∞–≤ –≤ –Ω—å–æ–≥–æ.")

    if not user:
        return bot.send_message(chat_id, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö. –°—Ö–æ–∂–µ, –≤—ñ–Ω –≤–∏–¥–∞–ª–∏–≤ —Å–≤–æ—ó –¥–∞–Ω—ñ.")

    firstname = message.reply_to_message.from_user.first_name
    joined = user.created_at
    words = user.word_count
    chars = user.ch_count
    photo = user.photo_count
    video = user.video_count
    audio = user.audio_count
    sticker = user.sticker_count

    return bot.send_message(
        message.chat.id,
        f'''
üßë‚Äçüíª User: <b>{firstname}</b>
üóìÔ∏è Joined: <b>{joined}</b>
üî§ Words: <b>{words}</b>
üî£ Characters: <b>{chars}</b>
üñºÔ∏è Photo: <b>{photo}</b>
üìπ Video: <b>{video}</b>
üéµ Audio: <b>{audio}</b>
‚ú® Sticker: <b>{sticker}</b>
            ''',
        parse_mode='HTML'
    )


@bot.message_handler(commands=['chats', '—á–∞—Ç–∏'], chat_types=['private'])
def command_chats_handler(message):
    users = session.query(User).filter(User.user_id == message.from_user.id).all()

    if not users:
        return bot.send_message(message.chat.id, '–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –Ω—ñ –≤ –æ–¥–Ω–æ–º—É —á–∞—Ç—ñ.')

    chats = []
    for user in users:
        chats.append(bot.get_chat(user.chat_id))

    if not chats:
        return bot.send_message(message.chat.id, '–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –Ω—ñ –≤ –æ–¥–Ω–æ–º—É —á–∞—Ç—ñ.1')

    arg = extract_arg(message.text)

    if not arg:

        msg = "<b>–ß–∞—Ç–∏:</b>\n\n"
        for chat_id, chat in enumerate(chats):
            msg += f"{chat_id + 1}. {chat.title}\n"

        msg += "\n–©–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ–≤–Ω–æ–≥–æ —á–∞—Ç—É - –Ω–∞–ø–∏—à—ñ—Ç—å /chats –Ω–æ–º–µ—Ä_—á–∞—Ç—É. –ü—Ä–∏–∫–ª–∞–¥: /chats 1"

        return bot.send_message(message.chat.id, msg, parse_mode='HTML')

    if not arg.isnumeric():
        return bot.send_message(message.chat.id, "–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ.")

    try:
        chat = chats[int(arg) - 1]
    except IndexError:
        return bot.send_message(message.chat.id, "–í–∏ –æ–±—Ä–∞–ª–∏ –Ω–µ–≤—ñ—Ä–Ω–∏–π –∞–π–¥—ñ.")

    user_obj = session.query(User).filter_by(user_id=message.from_user.id, chat_id=chat.id).first()
    if not user_obj:
        return bot.send_message(message.chat.id, "–ù–∞ –∂–∞–ª—å, —á–∞—Ç –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–Ω–∏—Ö.")

    try:
        name = bot.get_chat(user_obj.chat_id).title
    except TgException:
        name = "Deleted."
    firstname = message.from_user.first_name
    joined = user_obj.created_at
    words = user_obj.word_count
    chars = user_obj.ch_count
    photo = user_obj.photo_count
    video = user_obj.video_count
    audio = user_obj.audio_count
    sticker = user_obj.sticker_count

    return bot.send_message(
        message.chat.id,
        f'''
üí¨ Chat: <b>{name}</b>

üßë‚Äçüíª User: <b>{firstname}</b>
üóìÔ∏è Joined: <b>{joined}</b>
üî§ Words: <b>{words}</b>
üî£ Characters: <b>{chars}</b>
üñºÔ∏è Photo: <b>{photo}</b>
üìπ Video: <b>{video}</b>
üéµ Audio: <b>{audio}</b>
‚ú® Sticker: <b>{sticker}</b>
        ''',
        parse_mode='HTML'
    )


@bot.message_handler(chat_types=['supergroup'], content_types=['text'],
                     func=lambda message: not message.from_user.is_bot)
def message_handler(message):
    chat, user = initialize(message)

    words = re.findall(r'\b\w+\b', message.text)
    characters = len(message.text)

    chat.words_count += len(words)
    chat.ch_count += characters
    user.word_count += len(words)
    user.ch_count += characters

    session.commit()


@bot.message_handler(chat_types=['supergroup'], content_types=['photo'],
                     func=lambda message: not message.from_user.is_bot)
def photo_handler(message):
    chat, user = initialize(message)

    chat.photo_count += 1
    user.photo_count += 1

    session.commit()


@bot.message_handler(chat_types=['supergroup'], content_types=['video'],
                     func=lambda message: not message.from_user.is_bot)
def video_handler(message):
    chat, user = initialize(message)

    chat.video_count += 1
    user.video_count += 1

    session.commit()


@bot.message_handler(chat_types=['supergroup'], content_types=['audio'],
                     func=lambda message: not message.from_user.is_bot)
def audio_handler(message):
    chat, user = initialize(message)

    chat.audio_count += 1
    user.audio_count += 1

    session.commit()


@bot.message_handler(chat_types=['supergroup'], content_types=['sticker'],
                     func=lambda message: not message.from_user.is_bot)
def sticker_handler(message):
    chat, user = initialize(message)

    chat.sticker_count += 1
    user.sticker_count += 1

    session.commit()


# TODO: Global leaderboard
# TODO: Local(group) leaderboard
# TODO: Statistics graph (daily) (monthly)
# TODO: Deleting data from database
